<?php

/*-----------------------------------------------------------------------------------

TABLE OF CONTENTS

- WooThemes Framework Version & Theme Version
- woo_image - Get Image from custom field
- woo_get_embed - Get Video
- Woo Show Page Menu
- Get the style path currently selected
- Get page ID
- Short Codes
- Tidy up the image source url
- Show image in RSS feed
- Show analytics code footer
- Browser detection body_class() output
- Twitter's Blogger.js output for Twitter widgets
- Show Woo Options
- Template Detector
- Framework Updater
-- WooFramework Update Page  
-- WooFramework Update Head
-- WooFramework Version Getter
- Woo URL shortener


-----------------------------------------------------------------------------------*/



/*-----------------------------------------------------------------------------------*/
/* WooThemes Framework Version & Theme Version */
/*-----------------------------------------------------------------------------------*/
function woo_version(){

    $woo_framework_version = "2.6.1";
    update_option('woo_framework_version',$woo_framework_version);

    $theme_data = get_theme_data(TEMPLATEPATH . '/style.css');
    $theme_version = $theme_data['Version'];

    echo '<meta name="generator" content="'. get_option('woo_themename').' '. $theme_version .'" />' ."\n";
    echo '<meta name="generator" content="Woo Framework Version '. $woo_framework_version .'" />' ."\n";
   
}
add_action('wp_head','woo_version');
add_action('admin_head','woo_version');



/*-----------------------------------------------------------------------------------*/
/* woo_image - Get Image from custom field  */
/*-----------------------------------------------------------------------------------*/

/*
This function gets the custom field image and uses thumb.php to resize it
Parameters: 
        $key = Custom field key eg. "image"
        $width = Set width manually without using $type
        $height = Set height manually without using $type
        $class = CSS class to use on the img tag eg. "alignleft". Default is "thumbnail"
        $quality = Enter a quality between 80-100. Default is 90
        $id = Assign a custom ID, if alternative is required.
        $link = Echo with image links ('src') or just echo as image ('img').
        $repeat = Auto Img Function. Adjust amount of images to return for the post attachments.
        $offset = Auto Img Function. Offset the $repeat with assigned amount of objects.
        $before = Auto Img Function. Add Syntax before image output.
        $after = Auto Img Function. Add Syntax after image output.
        $single = Auto Img Function Only. Forces "img" return on images, like on single.php template
        $force = Force smaller images to not be effected with image width and height dimentions (proportions fix)
        $return = Return results instead of echoing out.
		$src = A parameter that accepts a img url for resizing. (No anchor)
		$auto_meta = Disables meta generated by the post_id. When src is used, this setting is automatically set to false.
		$meta = Add a custom meta text to the image and anchor of the image.
*/
function woo_image($args) {

	//Defaults
	$key = 'image';
	$width = null;
	$height = null;
	$class = '';
	$quality = 90;
	$id = null;
	$link = 'src';
	$repeat = 1;
	$offset = 0;
	$before = '';
	$after = '';
	$single = false;
	$force = false;
	$return = false;
	$is_auto_image = false;
	$src = '';
	$auto_meta = true;
	$meta = '';
	

	
	if ( !is_array($args) ) 
		parse_str( $args, $args );
	
	extract($args);
	
    if ( empty($id) ) {
		global $post;
		$id = $post->ID;
    }
	
	if ( $src != '' ) { // When a custom image is sent through
		$custom_field = $src;
		$link = 'img';
		$auto_meta = false;
	} else {
    	$custom_field = get_post_meta($id, $key, true);
	} 

	if ( empty($custom_field) && get_option('woo_auto_img') == 'true' ) { // Get the image from post attachments
        
        if( $offset >= 1 ) 
			$repeat = $repeat + $offset;
    
        $attachments = get_children( array(	'post_parent' => $id,
											'numberposts' => $repeat,
											'post_type' => 'attachment',
											'post_mime_type' => 'image',
											'order' => 'DESC', 
											'orderby' => 'menu_order date')
											);

		if ( !empty($attachments) ) { // Search for and get the post attachment
       
			$counter = -1;
			$size = 'large';
			foreach ( $attachments as $att_id => $attachment ) {            
				$counter++;
				if ( $counter < $offset ) 
					continue;
			
				$src = wp_get_attachment_image_src($att_id, $size, true);
				$custom_field = $src[0];
				$is_auto_image = true;
				$attachment_id = $att_id;
			}

		} else { // Get the first img tag from content

			$first_img = '';
			$post = get_post($id); 
			ob_start();
			ob_end_clean();
			$output = preg_match_all('/<img.+src=[\'"]([^\'"]+)[\'"].*>/i', $post->post_content, $matches);
			if ( !empty($matches[1][0]) )
				$custom_field = $matches[1][0];

		}
		
	} 
	
	// Return if there is no attachment or custom field set
	if ( empty($custom_field) ) 
       return;

    $output = '';

	// Get standard sizes
	if ( !$width && !$height ) {
		$width = '100';
		$height = '100';
	}
	
    $set_width = ' width="' . $width .'" ';
    $set_height = ' height="' . $height .'" '; 
    
    if($height == null OR $height == '')
        $set_height = '';
		
	// Set standard class
	if ( $class )
		$class .= ' woo-image';
	else 
		$class = 'woo-image';

	// Do check to verify if images are smaller then specified.
	$force_all = get_option('woo_force_all');
	$force_single = get_option('woo_force_single');
	if($force == true OR $force_all == true OR ($force_single == true AND is_single())){  
		$set_width = '';
		$set_height = '';
	}

	if ( get_option('woo_resize') == 'true' ) { 
	
		// Clean the image URL
		$href = $custom_field; 		
		$custom_field = cleanSource( $custom_field );

		// Check if WPMU and set correct path
		global $blog_id;
		if ( !$blog_id ) {
			global $current_blog;
			$blog_id = $current_blog->blog_id;				
		}
		if ( isset($blog_id) && $blog_id > 0 ) {
			$imageParts = explode( '/files/', $custom_field );
			if ( isset($imageParts[1]) ) {
				$custom_field = '/blogs.dir/' . $blog_id . '/files/' . $imageParts[1];
			} else {
				// Try again 
				$imageParts = explode( 'files/', $custom_field );
				if ( isset($imageParts[1]) ) 
					$custom_field = '/blogs.dir/' . $blog_id . '/files/' . $imageParts[1];
			}
		}
		
		//Set the ID to the Attachent's ID if it is an attachment
		if($is_auto_image == true){	
			$quick_id = $attachment_id;
		} else {
		 	$quick_id = $id;
		}
		
		if($auto_meta == true) {
			$alt = 'alt="'. get_the_title($quick_id) .'"';
			$title = 'title="'. get_the_title($quick_id) .'"';
		}
		elseif($auto_meta == false) {
			$alt = 'alt="'. $meta.'"';
			$title = 'title="'. $meta .'"';
		}
		else {
			$alt = 'alt=""';
			$title = '';
		}
		
		$img_link = '<img src="'. get_bloginfo('template_url'). '/thumb.php?src='. $custom_field .'&amp;w='. $width .'&amp;h='. $height .'&amp;zc=1&amp;q='. $quality .'" '.$alt.' class="'. $class .'" '. $set_width . $set_height . ' />';
		
		if( $link == 'img' ) {  // Just output the image
			$output .= $before; 
			$output .= $img_link;
			$output .= $after;  
			
		} else {  // Default - output with link

			if ( ( is_single() OR is_page() ) AND $single == false ) {
				$rel = 'rel="lightbox"';
			} else { 
				$href = get_permalink($id);
				$rel = '';
			}
			
			$output .= $before; 
			$output .= '<a '.$title.' href="' . $href .'" '.$rel.'>' . $img_link . '</a>';
			$output .= $after;  
		}
		
	} else {  // Not Resize
		
		$img_link =  '<img src="'. $custom_field .'" '. $alt .' '. $set_width . $set_height . ' class="'. $class .'" />';
		
		if ( $link == 'img' ) {  // Just output the image 
			$output .= $before;                   
			$output .= $img_link; 
			$output .= $after;  
			
		} else {  // Default - output with link
		
			if ( ( is_single() OR is_page() ) AND $single == false ) { 
				$href = $custom_field;
				$rel = 'rel="lightbox"';
			} else { 
				$href = get_permalink($id);
				$rel = '';
			}
			 
			$output .= $before;   
			$output .= '<a '. $alt .' href="' . $href .'" '. $rel .'>' . $img_link . '</a>';
			$output .= $after;   
		}
	}
	
	// Return or echo the output
	if ( $return == TRUE )
		return $output;
	else 
		echo $output; // Done  

}



/*-----------------------------------------------------------------------------------*/
/* Depreciated - woo_get_image - Get Image from custom field */
/*-----------------------------------------------------------------------------------*/

// Depreciated
function woo_get_image($key = 'image', $width = null, $height = null, $class = "thumbnail", $quality = 90,$id = null,$link = 'src',$repeat = 1,$offset = 0,$before = '', $after = '',$single = false, $force = false, $return = false) {
	// Run new function
	woo_image( 'key='.$key.'&width='.$width.'&height='.$height.'&class='.$class.'&quality='.$quality.'&id='.$id.'&link='.$link.'&repeat='.$repeat.'&offset='.$offset.'&before='.$before.'&after='.$after.'&single='.$single.'&fore='.$force.'&return='.$return );
	return;

}



/*-----------------------------------------------------------------------------------*/
/* woo_embed - Get Video embed code from custom field */
/*-----------------------------------------------------------------------------------*/

/*
Get Video
This function gets the embed code from the custom field
Parameters: 
        $key = Custom field key eg. "embed"
        $width = Set width manually without using $type
        $height = Set height manually without using $type
		$class = Custom class to apply to wrapping div
		$id = ID from post to pull custom field from
*/

function woo_embed($args) {

	//Defaults
	$key = 'embed';
	$width = null;
	$height = null;
	$class = 'video';
	$id = null;	
	
	if ( !is_array($args) ) 
		parse_str( $args, $args );
	
	extract($args);

  if(empty($id))
    {
    global $post;
    $id = $post->ID;
    } 
    

$custom_field = get_post_meta($id, $key, true);

if ($custom_field) : 

    $org_width = $width;
    $org_height = $height;
    
    // Get custom width and height
    $custom_width = get_post_meta($id, 'width', true);
    $custom_height = get_post_meta($id, 'height', true);    
    
    //Dynamic Height Calculation
    if ($org_height == '' && $org_width != '') {
    	$raw_values = explode(" ", $custom_field);
    
    	foreach ($raw_values as $raw) {
    		$embed_params = explode("=",$raw);
    		if ($embed_params[0] == 'width') {
   		 		$embed_width = ereg_replace("[^0-9]", "", $embed_params[1]);
    		}
    		elseif ($embed_params[0] == 'height') {
    			$embed_height = ereg_replace("[^0-9]", "", $embed_params[1]);
    		} 
    	}
    
    	$float_width = floatval($embed_width);
		$float_height = floatval($embed_height);
		$float_ratio = $float_height / $float_width;
		$calculated_height = intval($float_ratio * $width);
    }
    
    // Set values: width="XXX", height="XXX"
    if ( !$custom_width ) $width = 'width="'.$width.'"'; else $width = 'width="'.$custom_width.'"';
    if ( $height == '' ) { $height = 'height="'.$calculated_height.'"'; } else { if ( !$custom_height ) { $height = 'height="'.$height.'"'; } else { $height = 'height="'.$custom_height.'"'; } }
    $custom_field = stripslashes($custom_field);
    $custom_field = preg_replace( '/width="([0-9]*)"/' , $width , $custom_field );
    $custom_field = preg_replace( '/height="([0-9]*)"/' , $height , $custom_field );    

    // Set values: width:XXXpx, height:XXXpx
    if ( !$custom_width ) $width = 'width:'.$org_width.'px'; else $width = 'width:'.$custom_width.'px';
    if (  $height == '' ) { $height = 'height:'.$calculated_height.'px'; } else { if ( !$custom_height ) { $height = 'height:'.$org_height.'px'; } else { $height = 'height:'.$custom_height.'px'; } }
    $custom_field = stripslashes($custom_field);
    $custom_field = preg_replace( '/width:([0-9]*)px/' , $width , $custom_field );
    $custom_field = preg_replace( '/height:([0-9]*)px/' , $height , $custom_field );     

	// Suckerfish menu hack
	$custom_field = str_replace('<embed ','<param name="wmode" value="transparent"></param><embed wmode="transparent" ',$custom_field);

	$output = '';
    $output .= '<div class="'. $class .'">' . $custom_field . '</div>';
    
    return $output; 
	
else :

	return false;
    
endif;

}

/*-----------------------------------------------------------------------------------*/
/* Depreciated - woo_get_embed - Get Video embed code from custom field */
/*-----------------------------------------------------------------------------------*/

// Depreciated
function woo_get_embed($key = 'embed', $width, $height, $class = 'video', $id = null) {
	// Run new function
	return woo_embed( 'key='.$key.'&width='.$width.'&height='.$height.'&class='.$class.'&id='.$id );

}



/*-----------------------------------------------------------------------------------*/
/* Woo Show Page Menu */
/*-----------------------------------------------------------------------------------*/

// Show menu in header.php
// Exlude the pages from the slider
function woo_show_pagemenu( $exclude="" ) {
    // Split the featured pages from the options, and put in an array
    if ( get_option('woo_ex_featpages') ) {
        $menupages = get_option('woo_featpages');
        $exclude = $menupages . ',' . $exclude;
    }
    
    $pages = wp_list_pages('sort_column=menu_order&title_li=&echo=0&depth=1&exclude='.$exclude);
    $pages = preg_replace('%<a ([^>]+)>%U','<a $1><span>', $pages);
    $pages = str_replace('</a>','</span></a>', $pages);
    echo $pages;
}



/*-----------------------------------------------------------------------------------*/
/* Get the style path currently selected */
/*-----------------------------------------------------------------------------------*/
function woo_style_path() {
    $style = $_REQUEST[style];
    if ($style != '') {
        $style_path = $style;
    } else {
        $stylesheet = get_option('woo_alt_stylesheet');
        $style_path = str_replace(".css","",$stylesheet);
    }
    if ($style_path == "default")
      echo 'images';
    else
      echo 'styles/'.$style_path;
}



/*-----------------------------------------------------------------------------------*/
/* Get page ID */
/*-----------------------------------------------------------------------------------*/
function get_page_id($page_name){
    global $wpdb;
    $page_name = $wpdb->get_var("SELECT ID FROM $wpdb->posts WHERE post_name = '".$page_name."' AND post_status = 'publish' AND post_type = 'page'");
    return $page_name;
}



/*-----------------------------------------------------------------------------------*/
/* Short Codes */
/*-----------------------------------------------------------------------------------*/
function woo_post_insert_shortcode($attr) {

    // Allow plugins/themes to override the default gallery template.
    $output = apply_filters('insert', '', $attr);
    if ( $output != '' )
        return $output;

    extract(shortcode_atts(array(
        'name'      => null,
        'id'         => null,
        'before'    => '',
        'after'     => ''
    ), $attr));

    $id = intval($id);
    
    global $wpdb;
    if($name == ''){
    $query = "SELECT post_content FROM $wpdb->posts WHERE id = $id";

    } 
    else
    {
       $query = "SELECT post_content FROM $wpdb->posts WHERE post_name = '$name'";   
    }
    
    $result = $wpdb->get_var($query);
    
    if(!empty($result)){
        $result = wpautop( $result, $br = 1 ); 
        return $before . $result . $after;
    }
    else
        return;

}

add_shortcode('insert', 'woo_post_insert_shortcode');  // use "[page]" in a post



/*-----------------------------------------------------------------------------------*/
/* Tidy up the image source url */
/*-----------------------------------------------------------------------------------*/
function cleanSource($src) {

	// remove slash from start of string
	if(strpos($src, "/") == 0) {
		$src = substr($src, -(strlen($src) - 1));
	}

	// Check if same domain so it doesn't strip external sites
	$host = str_replace('www.', '', $_SERVER['HTTP_HOST']);
	if ( !strpos($src,$host) )
		return $src;


	$regex = "/^((ht|f)tp(s|):\/\/)(www\.|)" . $host . "/i";
	$src = preg_replace ($regex, '', $src);
	$src = htmlentities ($src);
    
    // remove slash from start of string
    if (strpos($src, '/') === 0) {
        $src = substr ($src, -(strlen($src) - 1));
    }
	
	return $src;
}



/*-----------------------------------------------------------------------------------*/
/* Show image in RSS feed */
/* Original code by Justin Tadlock http://justintadlock.com */
/*-----------------------------------------------------------------------------------*/
if (get_option('woo_rss_thumb') == "true")
	add_filter('the_content', 'add_image_RSS');
	
function add_image_RSS( $content ) {
	
	global $post, $id;
	$blog_key = substr( md5( get_bloginfo('url') ), 0, 16 );
	if ( ! is_feed() ) return $content;

	// Get the "image" from custom field
	$image = get_post_meta($post->ID, 'image', $single = true);
	$image_width = '240';

	// If there's an image, display the image with the content
	if($image !== '') {
		$content = '<p style="float:right; margin:0 0 10px 15px; width:'.$image_width.'px;">
		<img src="'.$image.'" width="'.$image_width.'" />
		</p>' . $content;
		return $content;
	} 

	// If there's not an image, just display the content
	else {
		$content = $content;
		return $content;
	}
} 



/*-----------------------------------------------------------------------------------*/
/* Show analytics code in footer */
/*-----------------------------------------------------------------------------------*/
function woo_analytics(){
	$output = get_option('woo_google_analytics');
	if ( $output <> "" ) 
		echo stripslashes($output) . "\n";
}
add_action('wp_footer','woo_analytics');



/*-----------------------------------------------------------------------------------*/
/* Browser detection body_class() output */
/*-----------------------------------------------------------------------------------*/
add_filter('body_class','browser_body_class');
function browser_body_class($classes) {
	global $is_lynx, $is_gecko, $is_IE, $is_opera, $is_NS4, $is_safari, $is_chrome, $is_iphone;

	if($is_lynx) $classes[] = 'lynx';
	elseif($is_gecko) $classes[] = 'gecko';
	elseif($is_opera) $classes[] = 'opera';
	elseif($is_NS4) $classes[] = 'ns4';
	elseif($is_safari) $classes[] = 'safari';
	elseif($is_chrome) $classes[] = 'chrome';
	elseif($is_IE) $classes[] = 'ie';
	else $classes[] = 'unknown';

	if($is_iphone) $classes[] = 'iphone';
	return $classes;
}

/*-----------------------------------------------------------------------------------*/
/* Twitter's Blogger.js output for Twitter widgets */
/*-----------------------------------------------------------------------------------*/

function woo_twitter_script($unique_id,$username,$limit) {
?>
<script type="text/javascript">
<!--//--><![CDATA[//><!--

    function twitterCallback2(twitters) {
      var statusHTML = [];
      for (var i=0; i<twitters.length; i++){
        var username = twitters[i].user.screen_name;
        var status = twitters[i].text.replace(/((https?|s?ftp|ssh)\:\/\/[^"\s\<\>]*[^.,;'">\:\s\<\>\)\]\!])/g, function(url) {
          return '<a href="'+url+'">'+url+'</a>';
        }).replace(/\B@([_a-z0-9]+)/ig, function(reply) {
          return  reply.charAt(0)+'<a href="http://twitter.com/'+reply.substring(1)+'">'+reply.substring(1)+'</a>';
        });
        statusHTML.push('<li><span>'+status+'</span> <a style="font-size:85%" href="http://twitter.com/'+username+'/statuses/'+twitters[i].id+'">'+relative_time(twitters[i].created_at)+'</a></li>');
      }
      document.getElementById('twitter_update_list_<?php echo $unique_id; ?>').innerHTML = statusHTML.join('');
    }
    
    function relative_time(time_value) {
      var values = time_value.split(" ");
      time_value = values[1] + " " + values[2] + ", " + values[5] + " " + values[3];
      var parsed_date = Date.parse(time_value);
      var relative_to = (arguments.length > 1) ? arguments[1] : new Date();
      var delta = parseInt((relative_to.getTime() - parsed_date) / 1000);
      delta = delta + (relative_to.getTimezoneOffset() * 60);
    
      if (delta < 60) {
        return 'less than a minute ago';
      } else if(delta < 120) {
        return 'about a minute ago';
      } else if(delta < (60*60)) {
        return (parseInt(delta / 60)).toString() + ' minutes ago';
      } else if(delta < (120*60)) {
        return 'about an hour ago';
      } else if(delta < (24*60*60)) {
        return 'about ' + (parseInt(delta / 3600)).toString() + ' hours ago';
      } else if(delta < (48*60*60)) {
        return '1 day ago';
      } else {
        return (parseInt(delta / 86400)).toString() + ' days ago';
      }
    }
//-->!]]>
</script>
<script type="text/javascript" src="http://twitter.com/statuses/user_timeline/<?php echo $username; ?>.json?callback=twitterCallback2&amp;count=<?php echo $limit; ?>"></script>
<?php

}

/*-----------------------------------------------------------------------------------*/
/* Show Woo options */
/*-----------------------------------------------------------------------------------*/

// Check if WooFramework Setting is set, if not then theme can output options
if ( get_option('woo_show_options') <> "true" ) {

	if ( !isset($_REQUEST['options']) )
		$_REQUEST['options'] = ''; 	

	$options = $_REQUEST['options'];
	if ($options == 'woo') 
		add_action('wp_head', 'woo_show_options');
}

function woo_show_options() {
	$options =  get_option('woo_template');      
    $return = woothemes_machine($options);
	echo '<link rel="stylesheet" type="text/css" href="'.get_bloginfo('template_directory').'/functions/admin-style.css" media="screen" />';
?>

<style type="text/css">
body { background:#fafafa !important; }
#content { padding:20px; border: 1px solid #D8D8D8; margin-bottom:20px; }
h1, h2, h3, h4, h5, h6  { margin: 0; font-family:Georgia, serif; color: #222; font-weight:normal; }
h1  {font-size: 22px; } h2  {font-size: 22px;} h3  {font-size: 18px;} h4  {font-size: 16px;} h5  {font-size: 14px;} h6  {font-size: 12px;}
#woo_container .group h2 { display:block; padding:15px 0 5px; font-style:italic; color:#555; font-size:24px;}
#woo_container #content .section h3.heading { font-family:Arial, Helvetica, sans-serif; font-size:14px; font-weight:bold; }
.button { display:none; }
</style>
</head>
<body>
    <div id="woo_container" class="custom">
    	<div id="content">
			<?php echo $return[0] ?>
        </div>
	</div>          
</body>
</html>
<?php

// Stop ouput
die;

}

/*-----------------------------------------------------------------------------------*/
/* Template Detector */
/*-----------------------------------------------------------------------------------*/


function woo_active_template($filename = null){

	if(isset($filename)){
		
		global $wpdb;
		
		$query = "SELECT *,count(*) AS used FROM wp_postmeta WHERE meta_key = '_wp_page_template' AND meta_value = '$filename' GROUP BY meta_value";
		
		$results = $wpdb->get_row($wpdb->prepare($query),'ARRAY_A'); // Select thrid coloumn accross
		
		//print_r($results);
		
		$post_id = $results['post_id'];
		
		$trash = get_post_status($post_id); // Check for trash
		
		if($trash != 'trash')
			return true;
		else
	 		return false;
	
	} else {
		return; // No $filename argument was set
	}

}

/*-----------------------------------------------------------------------------------*/
/* WooFramework Update Page */
/*-----------------------------------------------------------------------------------*/

function woothemes_framework_update_page(){
        $update_url = 'http://www.woothemes.com/u/test-file.zip';
        $method = get_filesystem_method();
                
        ?>
            <div class="wrap themes-page">
            <h2>Framework Update</h2>
            <?php echo $method; ?>
            <form method="post"  enctype="multipart/form-data" id="wooform" action="<?php echo admin_url('admin.php?page=woothemes_framework_update'); ?>">
                <?php wp_nonce_field('update-options'); ?>
                <p>The aim of this updater is to update the "functions" folder of your theme with the latest framework archive from the WooThemes.com server.</p>
                <p><strong>This feature is still in beta mode</strong> so it's safe to use, and won't do any overwriting of any important files.
                    At this point in time it will only (is successful) add a "test-file.txt" to your theme's functions folder.
                    Test it out and see if it works.</p>
                
                <p>Latest framework: <code><?php echo $update_url; ?></code></p>
                
                <p>&rarr; <strong>Your version:</strong> <?php echo get_option('woo_framework_version'); ?></p>
                
                <p>&rarr; <strong>Current Version:</strong> <?php woo_get_fw_version(); ?></p>
                
                <input type="hidden" name="update_url" value="<?php echo $update_url; ?>" />
                <input type="submit" value="Update Framework" />
                <input type="hidden" name="woo_update_save" value="save" />
                
                
            </form>
            </div>
            <?php
};

/*-----------------------------------------------------------------------------------*/
/* WooFramework Update Head */
/*-----------------------------------------------------------------------------------*/

function woothemes_framework_update_head(){

    if(isset($_POST['woo_update_save'])){        
        if($_POST['woo_update_save'] == 'save'){
            if(isset($_POST['update_url'])){
                
                //Setup Filesystem 
                $filesystem = WP_Filesystem();                    
                
                if($filesystem == false){
                    
                    function woothemes_framework_update_filesystem_warning() {
                            $method = get_filesystem_method();
                            echo "<div id='filesustem-warning' class='updated fade'><p>Failed: Filesystem preventing downloads. (". $method .")</p></div>";
                        }
                        add_action('admin_notices', 'woothemes_framework_update_filesystem_warning');
                        return;
                }
                
                $temp_file_addr = download_url($_POST['update_url']);
                
                if ( is_wp_error($temp_file_addr) ) {
                    
                    $error = $temp_file_addr->get_error_code();
                
                    if($error == 'http_no_url') {
                    //The source file was not found or is invalid
                        function woothemes_framework_update_missing_source_warning() {
                            echo "<div id='source-warning' class='updated fade'><p>Failed: Invalid URL Provided</p></div>";
                        }
                        add_action('admin_notices', 'woothemes_framework_update_missing_source_warning');
                    }
                    
                    return;

                  } 
                //Unzipp it
                $to = ABSPATH . 'wp-content/themes/' . get_option('template') . "/functions/";
                $dounzip = unzip_file($temp_file_addr, $to);
                
                unlink($temp_file_addr); // Delete
                
                if ( is_wp_error($dounzip) ) {
                    
                    $error = $dounzip->get_error_code();
                                    
                    if($error == 'incompatible_archive') {
                        //The source file was not found or is invalid
                        function woothemes_framework_update_no_archive_warning() {
                            echo "<div id='akismet-warning' class='updated fade'><p>Failed: Incompatible archive</p></div>";
                        }
                        add_action('admin_notices', 'woothemes_framework_update_no_archive_warning');
                    }
                    
                    return;

                   } 
                 
                }
                function woothemes_framework_updated_success() {
                            echo "<div id='framework-upgraded' class='updated fade'><p>Framework successfully downloaded and extracted. Your framework have been upgraded.</p></div>";
                        }
                        add_action('admin_notices', 'woothemes_framework_updated_success');
            }
        }                     
}
add_action('admin_head','woothemes_framework_update_head');

/*-----------------------------------------------------------------------------------*/
/* WooFramework Version Getter */
/*-----------------------------------------------------------------------------------*/

function woo_get_fw_version(){

    $fw_url = 'http://www.woothemes.com/demo/wooframework/wp-content/themes/wooframework/functions/functions-changelog.txt';
    @$file_contents = file($fw_url);
    
    if($file_contents) {
        foreach ($file_contents as $line_num => $line) {
                            
                $current_line =  $line;
                
                if($line_num > 1){    // Not the first or second... dodgy :P
                    
                    if (preg_match('/^[0-9]/', $line)) {
                        
                            $current_line = strstr($current_line,"version");
                            $current_line = preg_replace('~[^0-9,.]~','',$current_line);
                            $output = $current_line;
                            break;
                    }
                }     
        }
        echo $output;
        
    } else {
        echo 'Currently Unavailable';
    }

}

/*-----------------------------------------------------------------------------------*/
/* Woo URL shortener */
/*-----------------------------------------------------------------------------------*/

function woo_short_url($url) {
	$service = get_option('woo_url_shorten');
	$bitlyapilogin = get_option('woo_bitly_api_login');;
	$bitlyapikey = get_option('woo_bitly_api_key');;
	if (isset($service)) {
		switch ($service) 
		{
    		case 'TinyURL':
    			$shorturl = getTinyUrl($url);
    			break;
    		case 'Bit.ly':
    			if (isset($bitlyapilogin) && isset($bitlyapikey) && ($bitlyapilogin != '') && ($bitlyapikey != '')) {
    				$shorturl = make_bitly_url($url,$bitlyapilogin,$bitlyapikey,'json');
    			}
    			else {
    				$shorturl = getTinyUrl($url);
    			}
    			break;
    		case 'Off':
    			$shorturl = $url;
    			break;
    		default:
    			$shorturl = $url;
    			break;
    	}
	}
	else {
		$shorturl = $url;
	}
	return $shorturl;
}

//TinyURL
function getTinyUrl($url) {
	$tinyurl = file_get_contents_curl("http://tinyurl.com/api-create.php?url=".$url);
	return $tinyurl;
}

//Bit.ly
function make_bitly_url($url,$login,$appkey,$format = 'xml',$version = '2.0.1')
{
	//create the URL
	$bitly = 'http://api.bit.ly/shorten?version='.$version.'&longUrl='.urlencode($url).'&login='.$login.'&apiKey='.$appkey.'&format='.$format;
	
	//get the url
	//could also use cURL here
	$response = file_get_contents_curl($bitly);
	
	//parse depending on desired format
	if(strtolower($format) == 'json')
	{
		$json = @json_decode($response,true);
		return $json['results'][$url]['shortUrl'];
	}
	else //xml
	{
		$xml = simplexml_load_string($response);
		return 'http://bit.ly/'.$xml->results->nodeKeyVal->hash;
	}
}

//Alternative CURL function
function file_get_contents_curl($url) {
	$ch = curl_init();
	
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //Set curl to return the data instead of printing it to the browser.
	curl_setopt($ch, CURLOPT_URL, $url);
	
	$data = curl_exec($ch);
		
	if ($data === FALSE) {
		$data =  "cURL Error: " . curl_error($ch);
	}
	
	curl_close($ch);
	
	return $data;
}

/*-----------------------------------------------------------------------------------*/
/* THE END */
/*-----------------------------------------------------------------------------------*/
?>